---
title: "ATTAINS Upload File Creation"
author: "Tetra Tech"
date: last-modified
date-format: "MMMM DD, YYYY"
format: docx
editor: visual
---

## Introduction

The following user guide pertains to the [*create_attains_Assessment.R*](https://github.com/KateriSalk/Alaska_IR_Automation/blob/main/Code/7_Results/create_attains_Assessment.R) and [*create_attains_AU.R*](https://github.com/KateriSalk/Alaska_IR_Automation/blob/main/Code/7_Results/create_attains_AU.R) scripts developed by Tetra Tech for the Alaska Department of Environmental Conservation (AK DEC). This guide assumes that the user has relatively recent versions of R and [RStudio](https://posit.co/download/rstudio-desktop/) installed and that they are familiar with the R coding language. Please direct any questions regarding the usage of these scripts to Amber Bethe Crawford, AK DEC (amber.crawford\@alaska.gov).

## Purpose

The purpose of the *create_attains_Assessment.R* script is to take the outputs of previous scripts and create required the ATTAINS Assessment upload csv files. Similarly, the purpose of the *create_attains_AU.R* script is to take the outputs of previous scripts and create required the ATTAINS Assessment Unit upload csv files. The csv outputs of each script are reflective of the ATTAINS template version 2022-07-18.

## Required Packages

The required packages for the *data_processing.R* code are [tidyverse](https://www.tidyverse.org/), [readxl](https://cran.r-project.org/web/packages/readxl/index.html), [sf](https://cran.r-project.org/web/packages/sf/index.html), and [stringi](https://cran.r-project.org/web/packages/stringi/index.html)*.* Installation for the *tidyverse* package can be found in the Data Pull Guide. Below is a code chunk that demonstrates how to install and load these packages.

```{r}
#| output: false
#| eval: false
####Load Packages####
library(tidyverse)

#install.packages('readxl')
library(readxl)

#install.packages('sf')
library(sf)

#install.packages('stringi')
library(stringi)
```

## Required Inputs

This code has specific exterior files that are required for it to run. The inputs are listed below. All input files are loaded at the beginning of the script.

+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| File Name                                              | Purpose                                                                                    | Source              |
+========================================================+============================================================================================+=====================+
| WQ_data_trimmed_long_withAU20240509.csv                | Provides sample information such as date range that is required in the ATTAINS csv outputs | *data_processing.R* |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| categorized_aus_20240513.csv                           | Provides necessary metadata for ATTAINS csv outputs                                        | *categorize_au.R*   |
|                                                        |                                                                                            |                     |
|                                                        | \*For Assessment Only                                                                      |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| ATTAINS_AK_Asessments_DataDownload_20240126.xlsx       | Provides information from previous years ATTAINS                                           | ATTAINS             |
|                                                        |                                                                                            |                     |
|                                                        | \*For Assessment Only                                                                      |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| ATTAINS_AK_AsessmentUnits_DataDownload_20240126.xlsx   | Provides information from previous years ATTAINS                                           | ATTAINS             |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| WQ_metadata_trimmed_with_data_sufficiency_20240509.csv | Provides necessary metadata for ATTAINS csv outputs                                        | *data_processing.R* |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| ML_AU_Crosswalk.csv                                    | Monitoring location to Assessment Unit crosswalk                                           | AKDEC               |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| rivers.shp                                             | River Assessment Unit shapefiles                                                           | AKDEC               |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| lakes.shp                                              | Lake Assessment Unit shapefiles                                                            | AKDEC               |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| marine.shp                                             | Marine Assessment Unit shapefiles                                                          | AKDEC               |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+
| beaches.shp                                            | Beach Assessment Unit shapefiles                                                           | AKDEC               |
|                                                        |                                                                                            |                     |
|                                                        | \*\*For Assessment Units Only                                                              |                     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------------+---------------------+

## Assessment Outputs

The following sections outline the process to create the csvs required for ATTAINS Assessment uploads. The output of each section is exported as a csv to a folder location of the user's choosing.

### Assessments

The 'Assessments' csv output requires Assessment Unit ID, Agency, and Cycle Last Assessed. The following code include all the optional columns as NA values.

```{r}
#| output: false
#| eval: false
monitoring_year <- samples %>%
  select(AUID_ATTNS, ActivityStartDate) %>%
  group_by(AUID_ATTNS) %>%
  reframe(AUID_ATTNS = AUID_ATTNS,
          YEAR_LAST_MONITORED = year(max(ActivityStartDate))) %>%
  unique()

assessments <- categorized_aus %>%
  select(AUID_ATTNS) %>%
  left_join(monitoring_year, by = 'AUID_ATTNS') %>%
  mutate(AGENCY_CODE = 'S', 
         CYCLE_LAST_ASSESSED = '2024') %>% #Manual year entry
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS) %>% 
  unique() %>%
  select(ASSESSMENT_UNIT_ID, AGENCY_CODE, CYCLE_LAST_ASSESSED, YEAR_LAST_MONITORED)
```

### Uses

The 'Uses' csv output requires the Assessment Unit ID, Use Name, Use Support, and Agency. The Use Support (USE_ATTAINMENT_CODE) column required a character version of the state-level numeric system. This change is in the *case_when* statement. Some optional columns were filled out including: Monitoring Start Date, Monitoring End Date, and Use Level State IR Category Code. The following code includes the rest of the optional columns as NA values.

```{r}
#| output: false
#| eval: false
monitoring_dates <- samples %>%
  select(AUID_ATTNS, ActivityStartDate) %>%
  group_by(AUID_ATTNS) %>%
  reframe(AUID_ATTNS = AUID_ATTNS,
          USE_MONITORING_START = min(ActivityStartDate),
          USE_MONITORING_END = max(ActivityStartDate)) %>%
  unique()

uses_part1 <- categorized_aus %>%
  filter(!is.na(Use)) %>%
  #Following mutate code from Jenny Petitt
  mutate(ATTAINS_USE = 
           case_when(Use == "Human Health" & `Use Description` == "Water and Aquatic Organisms" ~ "WATER SUPPLY",
                     Use == "Human Health" & `Use Description` == "Water & Aquatic Organisms" ~ "WATER SUPPLY",
                     Use == "Water Supply" ~ "WATER SUPPLY",    
                     `Use Description` == "Harvesting" | `Use Description` == "Marine Harvesting" ~ "HARVESTING FOR CONSUMPTION OF RAW MOLLUSKS OR OTHER RAW AQUATIC LIFE",
                     `Use Description` == "Growth and propagation" | Use == "Aquatic Life" ~ "GROWTH AND PROPAGATION OF FISH, SHELLFISH, OTHER AQUATIC LIFE AND WILDLIFE",
                     `Use Description` == "Aquatic Organisms Only" | `Use Description` == "Aquatic Organisms only" ~ "GROWTH AND PROPAGATION OF FISH, SHELLFISH, OTHER AQUATIC LIFE AND WILDLIFE",  
                     Use == "Primary Contact Recreation" | Use == "Secondary Contact Recreation" | Use == "Secondary Contact recreation" ~ "WATER RECREATION"),
         ATTAINS_DESCRIPTION = 
           case_when(`Use Description` == "Water & Aquatic Organisms" | `Use Description` == "Water and Aquatic Organisms" |
                       `Use Description` == "Drinking" | `Use Description` == "Drinking Water" | `Use Description` == "Drinking water" ~ "DRINKING, CULINARY, AND FOOD PROCESSING",
                     `Use Description` == "Irrigation " |`Use Description` == "Agriculture" | `Use Description` == "Irrigation" | `Use Description` == "Irrigation Water" | 
                       `Use Description` == "Stock water" | `Use Description` == "Stock Water" | `Use Description` == "Stockwater" ~ "AGRICULTURE, INCLUDING IRRIGATION AND STOCK WATERING",
                     Use == "Primary Contact Recreation" ~ "CONTACT RECREATION",
                     Use == "Secondary Contact Recreation" | Use == "Secondary Contact recreation" ~ "SECONDARY RECREATION",
                     `Use Description` == "Seafood Processing" ~ "SEAFOOD PROCESSING",
                     `Use Description` == "Industrial" ~ "INDUSTRIAL",
                     `Use Description` == "Aquaculture" ~ "AQUACULTURE"),
         `Waterbody Type` = toupper(`Waterbody Type`), 
         PARAM_USE_NAME = paste(`Waterbody Type`, ATTAINS_USE, ATTAINS_DESCRIPTION, sep = ' / '),
         PARAM_USE_NAME = gsub(" / NA", "", PARAM_USE_NAME)) %>%
  #End of Jenny code
  select(AUID_ATTNS, AUID_ATTNS, PARAM_USE_NAME, Use_Category) %>%
  left_join(monitoring_dates, by = 'AUID_ATTNS') %>%
  unique() %>%
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS,
         USE_NAME = PARAM_USE_NAME) %>% #MATCH TO ATTAINS CODES
  mutate(USE_ATTAINMENT_CODE = case_when(Use_Category == 5 ~
                                           "N", #Not supporting
                                         Use_Category == 2 ~
                                           "F", #Fully supporting
                                         Use_Category == 3 ~
                                           "I", #Insufficient Information
                                         T ~
                                           "X"), #Not assessed
         USE_AGENCY_CODE = "S",
         USE_TREND = NA, #Here down are optional columns
         USE_THREATENED = NA,
         USE_ASMT_BASIS = NA,
         USE_ASMT_DATE = NA,
         USE_ASSESSOR_NAME = NA,
         USE_COMMENT = NA,
         USE_STATE_IR_CAT = NA,
         USE_ORG_QUALIFIER_FLAG = NA) 


uses_needs_1_cat_3 <- uses_part1 %>%
  group_by(ASSESSMENT_UNIT_ID) %>%
  #If all Uses are 2, one needs to be changed to a 3
  mutate(All_Cat_2 = all(Use_Category == 2)) %>% 
  filter(All_Cat_2 == T) %>%
  mutate(Use_Category = case_when(str_detect(USE_NAME, 'INDUSTRIAL') == T ~
                                    3,
                                  T ~ Use_Category)) %>%
  select(!All_Cat_2)

uses_part2 <- uses_part1 %>%
  filter(!ASSESSMENT_UNIT_ID %in% uses_needs_1_cat_3$ASSESSMENT_UNIT_ID) %>%
  rbind(uses_needs_1_cat_3) %>%
  select(!Use_Category) %>%
  select(ASSESSMENT_UNIT_ID, USE_NAME, USE_ATTAINMENT_CODE, USE_AGENCY_CODE,
         USE_TREND, USE_THREATENED, USE_ASMT_BASIS, USE_MONITORING_START,
         USE_MONITORING_END, USE_ASMT_DATE, USE_ASSESSOR_NAME, USE_COMMENT,
         USE_STATE_IR_CAT, USE_ORG_QUALIFIER_FLAG)
```

### Parameters

The 'Parameters' csv output requires Assessment Unit ID, Parameter Name, Associated Use, Parameter Status, and Attainment. The following code include all the optional columns as NA values.

```{r}
#| output: false
#| eval: false
parameters <- categorized_aus %>%
  filter(!is.na(Use)) %>%
  #Following mutate code from Jenny Petitt
  mutate(ATTAINS_USE = 
           case_when(Use == "Human Health" & `Use Description` == "Water and Aquatic Organisms" ~ "WATER SUPPLY",
                     Use == "Human Health" & `Use Description` == "Water & Aquatic Organisms" ~ "WATER SUPPLY",
                     Use == "Water Supply" ~ "WATER SUPPLY",    
                     `Use Description` == "Harvesting" | `Use Description` == "Marine Harvesting" ~ "HARVESTING FOR CONSUMPTION OF RAW MOLLUSKS OR OTHER RAW AQUATIC LIFE",
                     `Use Description` == "Growth and propagation" | Use == "Aquatic Life" ~ "GROWTH AND PROPAGATION OF FISH, SHELLFISH, OTHER AQUATIC LIFE AND WILDLIFE",
                     `Use Description` == "Aquatic Organisms Only" | `Use Description` == "Aquatic Organisms only" ~ "GROWTH AND PROPAGATION OF FISH, SHELLFISH, OTHER AQUATIC LIFE AND WILDLIFE",  
                     Use == "Primary Contact Recreation" | Use == "Secondary Contact Recreation" | Use == "Secondary Contact recreation" ~ "WATER RECREATION"),
         ATTAINS_DESCRIPTION = 
           case_when(`Use Description` == "Water & Aquatic Organisms" | `Use Description` == "Water and Aquatic Organisms" |
                       `Use Description` == "Drinking" | `Use Description` == "Drinking Water" | `Use Description` == "Drinking water" ~ "DRINKING, CULINARY, AND FOOD PROCESSING",
                     `Use Description` == "Irrigation " |`Use Description` == "Agriculture" | `Use Description` == "Irrigation" | `Use Description` == "Irrigation Water" | 
                       `Use Description` == "Stock water" | `Use Description` == "Stock Water" | `Use Description` == "Stockwater" ~ "AGRICULTURE, INCLUDING IRRIGATION AND STOCK WATERING",
                     Use == "Primary Contact Recreation" ~ "CONTACT RECREATION",
                     Use == "Secondary Contact Recreation" | Use == "Secondary Contact recreation" ~ "SECONDARY RECREATION",
                     `Use Description` == "Seafood Processing" ~ "SEAFOOD PROCESSING",
                     `Use Description` == "Industrial" ~ "INDUSTRIAL",
                     `Use Description` == "Aquaculture" ~ "AQUACULTURE"),
         `Waterbody Type` = toupper(`Waterbody Type`), 
         PARAM_USE_NAME = paste(`Waterbody Type`, ATTAINS_USE, ATTAINS_DESCRIPTION, sep = ' / '),
         PARAM_USE_NAME = gsub(" / NA", "", PARAM_USE_NAME)) %>%
  #End of Jenny code
  select(AUID_ATTNS, TADA.CharacteristicName, PARAM_USE_NAME, Individual_Category) %>%
  group_by(AUID_ATTNS, TADA.CharacteristicName) %>%
  #Find param status for the parameter/AU combo as a group
  mutate(is_2 = sum(ifelse(Individual_Category == 2, 1, 0)),
         is_3 = sum(ifelse(Individual_Category == 3, 1, 0)),
         param_status_midstep = case_when(max(Individual_Category) == 5 ~
                                            5,
                                          max(Individual_Category) == 2 ~
                                            2,
                                          #If there are 3's present, but also 2's
                                          is_2 >= 1 & is_3 >= 1 ~
                                            2,
                                          all(Individual_Category  == 3) ~
                                            3), 
         PARAM_STATUS_NAME = case_when(param_status_midstep == 5 ~ 
                                           "Cause", 
                                       param_status_midstep == 2 ~
                                           "Meeting Criteria", 
                                       param_status_midstep == 3 ~
                                           "Insufficient Information", #MAKE EXPORT CAT BASED ON THIS
                                       T ~ NA)) %>%
  ungroup() %>%
  select(!c(is_2, is_3)) %>% 
  unique() %>%
  group_by(AUID_ATTNS, PARAM_USE_NAME, TADA.CharacteristicName) %>%
  mutate(n = n(),
         is_2 = sum(ifelse(Individual_Category == 2, 1, 0)),
         is_3 = sum(ifelse(Individual_Category == 3, 1, 0)),
         is_5 = sum(ifelse(Individual_Category == 5, 1, 0)),
         #If n > 1, choose worse category
         new_Individual_Category = case_when(n > 1 & is_5 == 1 ~
                                               5,
                                             n > 1 & is_5 == 0 & is_2 > 0 ~
                                               2,
                                             T ~ Individual_Category)) %>%
  select(!c(Individual_Category, n, is_2, is_3, is_5)) %>%
  unique() %>%
  mutate(PARAM_ATTAINMENT_CODE = case_when(new_Individual_Category == 5 ~ 
                                             "Not meeting criteria", 
                                           new_Individual_Category == 2 ~
                                             "Meeting criteria", 
                                           new_Individual_Category == 3 ~
                                             "Not enough information", 
                                           T ~
                                             "Not applicable"),
         PARAM_TREND = NA,
         PARAM_COMMENT = NA,
         PARAM_AGENCY_CODE = NA,
         PARAM_POLLUTANT_INDICATOR = NA, #Should be Y/N
         PARAM_YEAR_LISTED = NA,
         PARAM_TARGET_TMDL_DATE = NA,
         PARAM_EXPECTED_TO_ATTAIN = NA,
         PARAM_PRIORITY_RANKING = NA, 
         PARAM_CONSENT_DECREE_CYCLE = NA,
         PARAM_ALT_LISTING_ID = NA,
         PARAM_ORG_QUALIFIER_FLAG = NA,
         PARAM_DELISTING_REASON = NA,
         PARAM_DELISTING_COMMENT = NA,
         PARAM_DELISTING_AGENCY = NA) %>%
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS,
         PARAM_NAME = TADA.CharacteristicName) %>%
  unique() %>%
  select(ASSESSMENT_UNIT_ID, PARAM_NAME, PARAM_USE_NAME, PARAM_STATUS_NAME,
         PARAM_ATTAINMENT_CODE, PARAM_TREND, PARAM_COMMENT, PARAM_AGENCY_CODE,
         PARAM_POLLUTANT_INDICATOR, PARAM_YEAR_LISTED, PARAM_TARGET_TMDL_DATE,
         PARAM_EXPECTED_TO_ATTAIN, PARAM_PRIORITY_RANKING,
         PARAM_CONSENT_DECREE_CYCLE, PARAM_ALT_LISTING_ID, 
         PARAM_ORG_QUALIFIER_FLAG, PARAM_DELISTING_REASON, 
         PARAM_DELISTING_COMMENT, PARAM_DELISTING_AGENCY)
```

### 

Optional Outputs

The 'Assessment Types', 'Assessment Method Types', 'Seasons', 'Sources', and 'Associated-Actions' csv outputs were not included since there was no required information and no evidence of AK DEC providing these in the past.

## Assessment Unit Outputs

The following sections outline the process to create the csvs required for ATTAINS Assessment Unit uploads. The output of each section is exported as a csv to a folder location of the user's choosing.

### Assessment Units

The 'Assessment Units' csv output requires Assessment Unit ID, Name, State, Agency, and Location Description. Use Class is provided, despite being an optional column. The Comment column is assigned NA values.

```{r}
#| output: false
#| eval: false
assessment_units <- data_current_AU_not_listed %>%
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS,
         ASSESSMENT_UNIT_NAME = Name_AU) %>%
  mutate(USE_CLASS_NAME = NA,
         LOCATION_DESCRIPTION = paste0('Located in HUC', HUC10_ID,', ',
                                       round(Shape_4_Summary, 3), ' ',
                                       AU_Shape_Unit, '.'),
         ASSESSMENT_UNIT_STATE = 'AK',
         ASSESSMENT_UNIT_AGENCY = 'S', #S for state agency
         ASSESSMENT_UNIT_COMMENT = NA) %>% #ASK ABOUT COMMENTS
  select(ASSESSMENT_UNIT_ID, ASSESSMENT_UNIT_NAME, ASSESSMENT_UNIT_STATE,
         ASSESSMENT_UNIT_AGENCY, ASSESSMENT_UNIT_COMMENT, LOCATION_DESCRIPTION,
         USE_CLASS_NAME) %>% #Change order to reflect template
  unique() 
```

### Water Types

The 'Water Types' csv output requires Assessment Unit ID, Water Type, Size, and Water Size Units. Size Source and Source Scale were pulled from previous ATTAINS records. The Estimation Method was assigned as NA.

```{r}
#| output: false
#| eval: false
water_types <- data_current_AU_not_listed %>%
  select(AUID_ATTNS, AU_Type, Shape_4_Summary, AU_Shape_Unit, Name_AU) %>%
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS,
         WATER_SIZE = Shape_4_Summary) %>%
  mutate(WATER_TYPE = ifelse(AU_Type == 'River', 'STREAM/CREEK/RIVER', toupper(AU_Type)),
         WATER_TYPE = case_when(AU_Type == 'MARINE' & str_detect(Name_AU, 'Harbor') ~
                                 'HARBOR',
                                AU_Type == 'MARINE' & str_detect(Name_AU, 'Estuary') ~
                                  'ESTUARY',
                                AU_Type == 'MARINE' & str_detect(Name_AU, 'Lagoon') ~
                                  'LAGOON',
                                AU_Type == 'MARINE' & (str_detect(Name_AU, 'Channel') |
                                                         str_detect(Name_AU, 'Bay') )~
                                  'CHANNEL AND BAY',
                                AU_Type == 'MARINE' ~
                                  'COASTAL',
                                T ~ WATER_TYPE), 
         WATER_UNIT = AU_Shape_Unit) %>%
  select(ASSESSMENT_UNIT_ID, WATER_TYPE, WATER_SIZE, WATER_UNIT) %>% #Reorder columns
  unique()
```

### Locations

The 'Locations' csv output is optional, but all the information is present in the analysis and previous ATTAINS records. All columns must be provided if this csv is to be uploaded to ATTAINS including Assessment Unit ID, Location Type Context, Location Type, and Location Value.

```{r}
#| output: false
#| eval: false
locations <- data_current_AU_not_listed %>%
  select(AUID_ATTNS, HUC10_ID) %>%
  rename(ASSESSMENT_UNIT_ID = AUID_ATTNS) %>% 
  mutate(LOCATION_TYPE_CODE = 'HUC-10',
         LOCATION_TYPE_CONTEXT = 'AKDECWQ',
         LOCATION_TEXT = paste0('HUC',HUC10_ID)) %>% #Add 190
  select(ASSESSMENT_UNIT_ID, LOCATION_TYPE_CODE, LOCATION_TYPE_CONTEXT, 
         LOCATION_TEXT) %>%
  unique()
```

### Monitoring Stations

The 'Monitoring Stations' csv output is optional, but all the information is present in the analysis and previous ATTAINS records. Three columns must be provided if this csv is to be uploaded to ATTAINS including Assessment Unit ID, Organization Identifier, and Monitoring Station ID. The Data Link column is optional and is not included in the output.

```{r}
#| output: false
#| eval: false
ml_names <- assessment_units %>%
  left_join(ml_au_crosswalk, by = c('ASSESSMENT_UNIT_ID' = 'AUID_ATTNS'))

monitoring_stations <- ml_names %>%
  select(ASSESSMENT_UNIT_ID, MonitoringLocationIdentifier) %>%
  unique() %>%
  rename(MS_LOCATION_ID = MonitoringLocationIdentifier) %>%
  mutate(MS_ORG_ID = 'AKDECWQ') %>%
  select(ASSESSMENT_UNIT_ID, MS_ORG_ID, MS_LOCATION_ID)
```
