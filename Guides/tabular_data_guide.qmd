---
title: "Tabular Data Guide"
author: "Tetra Tech"
date: last-modified
date-format: "MMMM DD, YYYY"
format: docx
editor: visual
---

## Introduction

The following user guide pertains to the [*summary_AU_table.R*](https://github.com/KateriSalk/Alaska_IR_Automation/blob/main/Code/7_Results/summary_au_table.R) script developed by Tetra Tech for the Alaska Department of Environmental Conservation (AK DEC). This guide assumes that the user has relatively recent versions of R and [RStudio](#0) installed and that they are familiar with the R coding language. Please direct any questions regarding the usage of these scripts to Amber Bethe Crawford, AK DEC (amber.crawford\@alaska.gov).

## Purpose

The purpose of the *summary_AU_table.R* script is to summarize the analysis results for each assessment unit for the ArcGIS online hub.

## Required Packages

The only required packages for the *data_processing.R* code is [*tidyverse*](https://www.tidyverse.org/) *.* Installation for the *tidyverse* package can be found in the Data Pull Guide. Below is a code chunk that demonstrates how to load these packages.

```{r}
#| output: false
#| eval: false
####Load Packages####
library(tidyverse)

```

## Required Inputs

This code has specific exterior files that are required for it to run. The inputs are listed below. All input files are loaded at the beginning of the script.

| File Name                                            | Purpose                                                                                              | Source            |
|--------------------|-------------------------------------|----------------|
| AUID_crosswalk.csv                                   | Connects previous AU IDs to current AU IDs. Required to connect to previous year ATTAINS information | AK DEC            |
| ATTAINS_AK_AsessmentUnits_DataDownload_20240126.xlsx | Provides information from previous years ATTAINS                                                     | ATTAINS           |
| categorized_aus_20240222.csv                         | Provides necessary metadata for ATTAINS csv outputs                                                  | *categorize_au.R* |

## Combine all AU IDs

In order to connect the AU metadata to the summary, we need to use the \*AUID_crosswalk.csv\* information. The next section of code pulls previous ATTAINS information with the current AU IDs, previous AU IDs, and historical AU IDs. None of the AU ID numbers are overridden in this code. This information is then combined together to provide previous metadata to the current year's upload.

```{r}
#| output: false
#| eval: false
#Join with previous AU ATTAINS by each AUID type
data_current_AU <- data_cat_AUID_added %>%
  mutate(assessmentUnitId = AUID_ATTNS) %>%
  inner_join(previous_au_attains, by = c('assessmentUnitId'))

#Find retired AUs
data_retired_AU <- data_cat_AUID_added %>%
  mutate(assessmentUnitId = Retired_AUID) %>%
  inner_join(previous_au_attains, by = c('assessmentUnitId'))

#Find historical AUs
data_historical_AU <- data_cat_AUID_added %>%
  mutate(assessmentUnitId = Historical_AUID) %>%
  inner_join(previous_au_attains, by = c('assessmentUnitId'))

#Combine all together
#This becomes the starting point for each csv export process
data_all_AUs_listed <- data_current_AU %>%
  rbind(data_retired_AU) %>%
  rbind(data_historical_AU)

#Find AUs not in previous ATTAINS
data_current_AU_not_listed <- data_cat_AUID_added %>%
  mutate(assessmentUnitId = AUID_ATTNS) %>%
  full_join(previous_au_attains, by = c('assessmentUnitId')) %>%
  filter(!assessmentUnitId %in% data_current_AU$assessmentUnitId) %>%
  filter(!assessmentUnitId %in% data_retired_AU$assessmentUnitId) %>%
  filter(!assessmentUnitId %in% data_historical_AU$assessmentUnitId)
```

## Summarize

After combining all AU information together, the code creates a new column that assigns a specific string value to the state's numerical categories. The code then selects the most relevant columns for the online map and ensures each row is unique. The *final_summary* variable is then exported as a csv.

```{r}
#| output: false
#| eval: false
#Summarize data
final_summary <- data_all_AUs %>%
  mutate(overallStatus = case_when(Use_Category == 2 ~ 'Fully Supporting',
                                   Use_Category == 3 ~ 'Not Assessed',
                                   Use_Category == 5 ~ 'Not Supporting',
                                   T ~ NA)) %>% 
  select(AUID_ATTNS, `Waterbody Type`, Use, Use_Category, overallStatus, 
         assessmentUnitName, locationDescription, waterSize, waterSizeUnits) %>%
  unique() 
```
